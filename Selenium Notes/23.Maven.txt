Maven (Build tool)
==================
-its is built executions and usd to maintating the dependencies
- repository, where all dependencies are present.
- when maven project created POM.xml file generated
   --> all dependencies (jars),plugins, properties, builts etc are present
   --> seneium jar-- selenium webdriver Elements, methods etc
   --> apache poi jar-- Excel file
   --> testNG plugin -- all keywords, annotations etc related testng

- Build--->
test.java, base.java, utility.java, folders(drivers, test data)
|---> compile
test.class, base.class,  utility.class
|---> package
.jar file or .war file

-How to run
1. TestNg suite (testng.xml)
2. maven life cycle (mvn command)
3. //Integrating testng dependencies in the POM.xml & running the pom.xml file using Jenkins
   - Eclipse (project)
   - local repo
   - git commands
   - send the project into remote repo (Git hub)
   - .jar file is executed using Jenkins
=================================================
# Meven setup
- check in cmd
 mvn -version 
- if not  then do the set up
1. download apache maven (bin) (current version)
2. unzip it
3. Maven system variable and set path
  system variable:   
  MAVEN_HOME  --> C:\Program Files\apache-maven-3.8.4
  
  set path:
  path      --> %MAVEN_HOME%\bin
            --> C:\Program Files\apache-maven-3.8.4/bin
4. once set syatem variable and path for maven
  - check in cmd
    mvn -version
    Apache Maven 3.8.4 (9b656c72d54e5bacbed989b64718c159fe39b537)
    Maven home: C:\Program Files\apache-maven-3.8.4

===========================================
# steps to create maven project
1. File--> New--> Project--> Maven Project
2. choose Archetype: 
   Group id:  org.apache.maven.archetype  ---> maven-archetype-quickstart (1.4)

3. create folder structure
  src/main/java  --> base class (package), utility(package)
  src/test/java  --> pages(package), tests(package)
  driver (folder)
  Screenshot (folder)
  testData (folder)
  update POM.xml dependencies from maven repository

4. create testng.xml
5. run it
==================================

#Maven life cycle (Maven is our build tool)
- set of task that are executed when maven build is run
- build pahses
- three life cycles of maven build
1. Default life cycle==> project deployment

2. Clean life cycle ==> handles project cleaning
3. Site life cycle===> handles the creation of your projects site documentation
----------------
@Default life cycle
 # clean project: ---> clean target folder
             - mvn clean

1. valiadte:valiadte the project is correct and all neccesary info is available 
            - check pom.xml conf
	    - manual stage 

2. compile:complile source code
           - compile POM classes
	   -mvn compile

3. Test   : Test the compiled source code using suitable unit testing frameworks
          - not required code is packed/ deployed
          - execute our test classes
	  - mvn clean test

4.Package: packing copiled source code and related dependencies into distributable format
          zipped: packed source code
          jar: standalone
          war: web application

	- mvn clean package 


5. Verify: run the created package at local
6. Install: install the package into local

7. deploy: local repo---> remote repo
          - sharing the build to teamates/ other projects

java -jar <jarfilename>.jar
============================================
# maven commands:

- mvn clean: clean target directory from project
- mvn compile
- mvn test
- mvn package : create jar file into target directory
 *mvn clean package:clear target dire--> 
           create package with running the test classes during build
 *mvn clean package-Dmaven.test.skip=true: doing as above but,
            create package without running the test classes during build
* mvn verify -Dmaven.test.skip=true  : valiadte package created correct/ not
* mvn clean install -Dmaven.test.skip=true 
  : once installed local repository will be created and its ready to push into remote

=============================================
Git-Github
# How to push the local repo to remote repo

- Create remote repo
- intialize local repo: git init
- add the files into staging : git add *
- commit  : git commit -m "upload the project"
- git branch -M main
- git remote add origin https://github.com/Sanjay2012/TradingAppAutomation.git
- git push -u origin main
=======================